generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int   @id @default(autoincrement())
  age                     Int
  gender                  String
  occupation              String
  ratings                 Rating[]
  preferences             Preference[]
  leftSideNeighborhoods   Neighborhood[] @relation("leftSideNeighborhoods")
  rightSideNeighborhoods  Neighborhood[] @relation("rightSideNeighborhoods")
}

model Genre {
  id            Int   @id @default(autoincrement())
  name          String
  items         GenresOnItems[]
  preferences   Preference[]
}

model Item {
  id        Int   @id @default(autoincrement())
  title     String
  genres    GenresOnItems[]
  ratings   Rating[]
}

model GenresOnItems {
  item      Item    @relation(fields: [itemId], references: [id])
  itemId    Int     // relation scalar field (used in the `@relation` attribute above)
  genre     Genre   @relation(fields: [genreId], references: [id])
  genreId   Int     // relation scalar field (used in the `@relation` attribute above)

  @@id([itemId, genreId])
}

model Rating {
  id      Int   @id @default(autoincrement())
  rating  Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  item    Item  @relation(fields: [itemId], references: [id])
  itemId  Int
}

model Preference {
  id        Int   @id @default(autoincrement())
  value     Int
  user      User  @relation(fields: [userId], references: [id])
  userId    Int
  genre     Genre  @relation(fields: [genreId], references: [id])
  genreId   Int
}

model Neighborhood {
  id            Int   @id @default(autoincrement())
  distance      Float
  leftUser      User  @relation(fields: [leftUserId], references: [id], name: "leftSideNeighborhoods")
  leftUserId    Int
  rightUser     User  @relation(fields: [rightUserId], references: [id], name: "rightSideNeighborhoods")
  rightUserId   Int
}
